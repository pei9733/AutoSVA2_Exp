// This property file was autogenerated by AutoSVA on 2024-09-25
// to check the behavior of the original RTL module, whose interface is described below: 
module fifo2_prop
#(
		parameter ASSERT_INPUTS = 0,
		parameter INFLIGHT_IDX = 2, 
		parameter SIZE = 4
)
(		// Clock + Reset
		input  wire                          clk,
		input  wire                          rst_n,
		
		input  wire                          in_val,
		input  wire                          in_rdy, //output
		input  wire [SIZE-1:0]               in_data,
		
		input  wire                          out_val, //output
		input  wire                          out_rdy,
		input  wire [SIZE-1:0]               out_data //output
	);

//==============================================================================
// Local Parameters
//==============================================================================

genvar j;
default clocking cb @(posedge clk);
endclocking
default disable iff (!rst_n);

// Re-defined wires 
wire [INFLIGHT_IDX-1:0] in_transid;
wire [INFLIGHT_IDX-1:0] out_transid;

// Symbolics and Handshake signals
wire in_hsk = in_val && in_rdy;
wire out_hsk = out_val && out_rdy;
wire [INFLIGHT_IDX-1:0] symb_in_transid;
am__symb_in_transid_stable: assume property($stable(symb_in_transid));

//==============================================================================
// Modeling
//==============================================================================

// Modeling incoming request for fifo
if (ASSERT_INPUTS) begin
	as__fifo_fairness: assert property (out_val |-> s_eventually(out_rdy));
end else begin
	am__fifo_fairness: assume property (out_val |-> s_eventually(out_rdy));
end

// Generate sampling signals and model
reg [3:0] fifo_transid_sampled;
wire fifo_transid_set = in_hsk && in_transid == symb_in_transid;
wire fifo_transid_response = out_hsk && out_transid == symb_in_transid;

always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_sampled <= '0;
	end else if (fifo_transid_set || fifo_transid_response ) begin
		fifo_transid_sampled <= fifo_transid_sampled + fifo_transid_set - fifo_transid_response;
	end
end
co__fifo_transid_sampled: cover property (|fifo_transid_sampled);
if (ASSERT_INPUTS) begin
	as__fifo_transid_sample_no_overflow: assert property (fifo_transid_sampled != '1 || !fifo_transid_set);
end else begin
	am__fifo_transid_sample_no_overflow: assume property (fifo_transid_sampled != '1 || !fifo_transid_set);
end


// Assert that if valid eventually ready or dropped valid
as__fifo_transid_hsk_or_drop: assert property (in_val |-> s_eventually(!in_val || in_rdy));
// Assert that every request has a response and that every reponse has a request
as__fifo_transid_eventual_response: assert property (|fifo_transid_sampled |-> s_eventually(out_val && (out_transid == symb_in_transid) ));
as__fifo_transid_was_a_request: assert property (fifo_transid_response |-> fifo_transid_set || fifo_transid_sampled);


// Modeling data integrity for fifo_transid
reg [SIZE-1:0] fifo_transid_data_model;
always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_data_model <= '0;
	end else if (fifo_transid_set) begin
		fifo_transid_data_model <= in_data;
	end
end

as__fifo_transid_data_unique: assert property (|fifo_transid_sampled |-> !fifo_transid_set);
as__fifo_transid_data_integrity: assert property (|fifo_transid_sampled && fifo_transid_response |-> (out_data == fifo_transid_data_model));

assign in_transid = fifo2.wr_ptr_reg;
assign out_transid = fifo2.rd_ptr_reg;

//====DESIGNER-ADDED-SVA====//

// *** GPT4-GENERATED SVA BATCH *** //
// Check that if in_val and in_rdy are high, and out_val and out_rdy are low, fifo2 is not empty in the next cycle
asgpt__in_val_and_in_rdy_high_out_val_and_out_rdy_low: assert property (
    @(posedge clk) (fifo2.in_val && fifo2.in_rdy && !fifo2.out_val && !fifo2.out_rdy) |=> !(fifo2.empty_reg)
);

// Check that if out_val and out_rdy are high, and in_val and in_rdy are low, fifo2 is not full in the next cycle
asgpt__out_val_and_out_rdy_high_in_val_and_in_rdy_low: assert property (
    @(posedge clk) (fifo2.out_val && fifo2.out_rdy && !fifo2.in_val && !fifo2.in_rdy) |=> !(fifo2.full_reg)
);

// Check that if in_val and in_rdy are high, and out_val and out_rdy are high, fifo2 is not empty and not full in the next cycle
asgpt__in_val_and_in_rdy_out_val_and_out_rdy_high: assert property (
    @(posedge clk) (fifo2.in_val && fifo2.in_rdy && fifo2.out_val && fifo2.out_rdy) |=> !(fifo2.empty_reg) && !(fifo2.full_reg)
);

// // Check that if in_val is high and in_rdy is low, fifo2 state does not change in the next cycle
// asgpt__in_val_high_in_rdy_low: assert property (
//     @(posedge clk) (fifo2.in_val && !fifo2.in_rdy) |=> ($past(fifo2.empty_reg) == fifo2.empty_reg) && ($past(fifo2.full_reg) == fifo2.full_reg)
// );

// // Check that if out_val is high and out_rdy is low, fifo2 state does not change in the next cycle
// asgpt__out_val_high_out_rdy_low: assert property (
//     @(posedge clk) (fifo2.out_val && !fifo2.out_rdy) |=> ($past(fifo2.empty_reg) == fifo2.empty_reg )&& ($past(fifo2.full_reg) == fifo2.full_reg)
// );

// Check that if in_val and out_val are low, fifo2 state does not change in the next cycle
asgpt__in_val_and_out_val_low: assert property (
    @(posedge clk) (!fifo2.in_val && !fifo2.out_val) |=> $past(fifo2.empty_reg) == fifo2.empty_reg && $past(fifo2.full_reg) == fifo2.full_reg
);

// Check that if in_val is high and in_rdy is high, the data is stored in the fifo in the next cycle
asgpt__in_val_and_in_rdy_high: assert property (
    @(posedge clk) (fifo2.in_val && fifo2.in_rdy) |=> $past(fifo2.in_data) == fifo2.fifo_storage_reg[$past(fifo2.wr_ptr_reg)]
);

// Check that if out_val is high and out_rdy is high, the data is read from the fifo in the next cycle
asgpt__out_val_and_out_rdy_high: assert property (
    @(posedge clk) (fifo2.out_val && fifo2.out_rdy) |=> $past(fifo2.out_data) == fifo2.fifo_storage_reg[$past(fifo2.rd_ptr_reg)]
);

// *** END OF GPT4-GENERATED SVA BATCH ***//
endmodule