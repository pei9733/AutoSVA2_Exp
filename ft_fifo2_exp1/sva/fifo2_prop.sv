// This property file was autogenerated by AutoSVA on 2024-09-25
// to check the behavior of the original RTL module, whose interface is described below: 
module fifo2_prop
#(
		parameter ASSERT_INPUTS = 0,
		parameter INFLIGHT_IDX = 2, // Log2 of the number of slots
		parameter SIZE = 4 // Width of the data slot
)
(		// Clock + Reset
		input  wire                          clk,
		input  wire                          rst_n,
		
		input  wire                          in_val,
		input  wire                          in_rdy, //output
		input  wire [SIZE-1:0]               in_data,
		
		input  wire                          out_val, //output
		input  wire                          out_rdy,
		input  wire [SIZE-1:0]               out_data //output
	);

//==============================================================================
// Local Parameters
//==============================================================================

genvar j;
default clocking cb @(posedge clk);
endclocking
default disable iff (!rst_n);

// Re-defined wires 
wire [INFLIGHT_IDX-1:0] in_transid;
wire [INFLIGHT_IDX-1:0] out_transid;

// Symbolics and Handshake signals
wire in_hsk = in_val && in_rdy;
wire out_hsk = out_val && out_rdy;
wire [INFLIGHT_IDX-1:0] symb_in_transid;
am__symb_in_transid_stable: assume property($stable(symb_in_transid));

//==============================================================================
// Modeling
//==============================================================================

// Modeling incoming request for fifo
if (ASSERT_INPUTS) begin
	as__fifo_fairness: assert property (out_val |-> s_eventually(out_rdy));
end else begin
	am__fifo_fairness: assume property (out_val |-> s_eventually(out_rdy));
end

// Generate sampling signals and model
reg [3:0] fifo_transid_sampled;
wire fifo_transid_set = in_hsk && in_transid == symb_in_transid;
wire fifo_transid_response = out_hsk && out_transid == symb_in_transid;

always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_sampled <= '0;
	end else if (fifo_transid_set || fifo_transid_response ) begin
		fifo_transid_sampled <= fifo_transid_sampled + fifo_transid_set - fifo_transid_response;
	end
end
co__fifo_transid_sampled: cover property (|fifo_transid_sampled);
if (ASSERT_INPUTS) begin
	as__fifo_transid_sample_no_overflow: assert property (fifo_transid_sampled != '1 || !fifo_transid_set);
end else begin
	am__fifo_transid_sample_no_overflow: assume property (fifo_transid_sampled != '1 || !fifo_transid_set);
end


// Assert that if valid eventually ready or dropped valid
as__fifo_transid_hsk_or_drop: assert property (in_val |-> s_eventually(!in_val || in_rdy));
// Assert that every request has a response and that every reponse has a request
as__fifo_transid_eventual_response: assert property (|fifo_transid_sampled |-> s_eventually(out_val && (out_transid == symb_in_transid) ));
as__fifo_transid_was_a_request: assert property (fifo_transid_response |-> fifo_transid_set || fifo_transid_sampled);


// Modeling data integrity for fifo_transid
reg [SIZE-1:0] fifo_transid_data_model;
always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_data_model <= '0;
	end else if (fifo_transid_set) begin
		fifo_transid_data_model <= in_data;
	end
end

as__fifo_transid_data_unique: assert property (|fifo_transid_sampled |-> !fifo_transid_set);
as__fifo_transid_data_integrity: assert property (|fifo_transid_sampled && fifo_transid_response |-> (out_data == fifo_transid_data_model));

assign in_transid = fifo2.wr_ptr_reg;
assign out_transid = fifo2.rd_ptr_reg;

//====DESIGNER-ADDED-SVA====//

// *** GPT4-GENERATED SVA BATCH *** //

// Assertion to check if the fifo is not ready to accept input data when it is full
asgpt__fifo_not_ready_when_full: assert property (
    fifo2.full_reg |-> !fifo2.in_rdy
);

// Assertion to check if the fifo is ready to accept input data when it is not full
asgpt__fifo_ready_when_not_full: assert property (
    !fifo2.full_reg |-> fifo2.in_rdy
);

// Assertion to check if the fifo has valid output data when it is not empty
asgpt__fifo_has_data_when_not_empty: assert property (
    !fifo2.empty_reg |-> fifo2.out_val
);

// Assertion to check if the fifo does not have valid output data when it is empty
asgpt__fifo_no_data_when_empty: assert property (
    fifo2.empty_reg |-> !fifo2.out_val
);

// Assertion to check if write pointer is incremented when input data is valid and fifo is ready
asgpt__write_pointer_incremented: assert property (
    fifo2.in_val && fifo2.in_rdy |=> $past(fifo2.wr_ptr_reg) + 1'b1 == fifo2.wr_ptr_reg
);

// Assertion to check if read pointer is incremented when output data is valid and fifo is ready
asgpt__read_pointer_incremented: assert property (
    fifo2.out_val && fifo2.out_rdy |=> $past(fifo2.rd_ptr_reg) + 1'b1 == fifo2.rd_ptr_reg
);

// Assertion to check if input data is stored in fifo when input is valid and fifo is ready
asgpt__input_data_stored: assert property (
    fifo2.in_val && fifo2.in_rdy |=> (fifo2.fifo_storage_reg[$past(fifo2.wr_ptr_reg)]) == (fifo2.in_data)
);

// Assertion to check if output data is read from fifo when output is valid and fifo is ready
asgpt__output_data_read: assert property (
    fifo2.out_val && fifo2.out_rdy |=> (fifo2.fifo_storage_reg[$past(fifo2.rd_ptr_reg)]) == fifo2.out_data
);

// *** END OF GPT4-GENERATED SVA BATCH ***//
endmodule